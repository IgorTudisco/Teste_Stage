<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Teste_Stage</name>
    </assembly>
    <members>
        <member name="T:Teste_Stage.Controllers.CandidatoController">
            <summary>
            Controlador para gerenciar as operações relacionadas a candidatos.
            </summary>
        </member>
        <member name="M:Teste_Stage.Controllers.CandidatoController.#ctor(Teste_Stage.Services.CandidatoService)">
            <summary>
            Inicializa uma nova instância do controlador de candidatos.
            </summary>
            <param name="candidatoService">Serviço utilizado para operações de candidatos.</param>
        </member>
        <member name="M:Teste_Stage.Controllers.CandidatoController.CadastrarCandidato(Teste_Stage.Data.Dtos.CandidatoDtos.CreateCandidatoDto)">
            <summary>
            Adiciona um novo candidato ao banco de dados.
            </summary>
            <param name="candidatoDto">Objeto contendo os dados necessários para criar um novo candidato.</param>
            <returns>Retorna um status HTTP indicando o resultado da operação.</returns>
            <response code="201">Se o candidato for criado com sucesso.</response>
            <response code="400">Se o endereço fornecido for inválido ou já existir.</response>
            <response code="404">Se algum dos IDs fornecidos no DTO for nulo.</response>
        </member>
        <member name="M:Teste_Stage.Controllers.CandidatoController.RecuperaCandidatos(System.Int32,System.Int32)">
            <summary>
            Retorna uma lista de candidatos com base na quantidade e na paginação.
            </summary>
            <param name="skip">Número de elementos a pular na lista de candidatos.</param>
            <param name="take">Número de elementos a retornar.</param>
            <returns>Uma lista de candidatos.</returns>
            <response code="200">Retorna a lista de candidatos solicitada.</response>
        </member>
        <member name="M:Teste_Stage.Controllers.CandidatoController.AchaCandidatoPorId(System.Int32)">
            <summary>
            Retorna um candidato específico com base no ID fornecido.
            </summary>
            <param name="id">ID do candidato a ser retornado.</param>
            <returns>O candidato correspondente ao ID fornecido ou um status HTTP de NotFound se o candidato não existir.</returns>
            <response code="200">Retorna o candidato encontrado.</response>
            <response code="404">Se o candidato com o ID fornecido não for encontrado.</response>
        </member>
        <member name="M:Teste_Stage.Controllers.CandidatoController.AtualizaCandidato(System.Int32,Teste_Stage.Data.Dtos.CandidatoDtos.UpdateCandidatoDto)">
            <summary>
            Atualiza as informações de um candidato específico com base no ID fornecido.
            </summary>
            <param name="id">ID do candidato a ser atualizado.</param>
            <param name="candidatoDto">Objeto contendo os dados atualizados do candidato.</param>
            <returns>Um status HTTP indicando o resultado da operação.</returns>
            <response code="204">Se a atualização for bem-sucedida.</response>
            <response code="400">Se o endereço fornecido for inválido.</response>
            <response code="404">Se o candidato com o ID fornecido não for encontrado.</response>
        </member>
        <member name="M:Teste_Stage.Controllers.CandidatoController.DeleteCandidato(System.Int32)">
            <summary>
            Deleta um candidato específico com base no ID fornecido.
            </summary>
            <param name="id">ID do candidato a ser deletado.</param>
            <returns>Um status HTTP indicando o resultado da operação.</returns>
            <response code="204">Se a exclusão for bem-sucedida.</response>
            <response code="404">Se o candidato com o ID fornecido não for encontrado.</response>
        </member>
        <member name="T:Teste_Stage.Controllers.EnderecoController">
            <summary>
            Controlador para gerenciar operações relacionadas a Endereços.
            </summary>
        </member>
        <member name="M:Teste_Stage.Controllers.EnderecoController.#ctor(Teste_Stage.Services.EnderecoService)">
            <summary>
            Construtor da classe EnderecoController.
            </summary>
            <param name="enderecoService">Instância do serviço de endereços.</param>
        </member>
        <member name="M:Teste_Stage.Controllers.EnderecoController.CadastrarEndereco(Teste_Stage.Data.Dtos.EnderecoDtos.CreateEnderecoDto)">
            <summary>
            Adiciona um endereço ao banco de dados.
            </summary>
            <param name="enderecoDto">Objeto com os campos necessários para criação de um endereço.</param>
            <returns>IActionResult contendo o endereço criado.</returns>
            <response code="201">Caso a inserção seja feita com sucesso.</response>
        </member>
        <member name="M:Teste_Stage.Controllers.EnderecoController.RecuperaEnderecos(System.Int32,System.Int32)">
            <summary>
            Retorna uma lista de endereços. Você pode escolher a quantidade de elementos nessa lista.
            </summary>
            <param name="skip">Número de elementos a pular.</param>
            <param name="take">Número de elementos a retornar.</param>
            <returns>IEnumerable contendo os endereços recuperados.</returns>
            <response code="200">Caso a lista seja retornada com sucesso.</response>
        </member>
        <member name="M:Teste_Stage.Controllers.EnderecoController.AchaEnderecoPorId(System.Int32)">
            <summary>
            Retorna um endereço específico com base no ID fornecido.
            </summary>
            <param name="id">ID do endereço a ser encontrado.</param>
            <returns>IActionResult contendo o endereço encontrado ou um status de NotFound se o endereço não existir.</returns>
            <response code="200">Retorna o endereço encontrado.</response>
            <response code="404">Se o endereço não for encontrado.</response>
        </member>
        <member name="M:Teste_Stage.Controllers.EnderecoController.AtualizaEndereco(System.Int32,Teste_Stage.Data.Dtos.EnderecoDtos.UpdateEnderecoDto)">
            <summary>
            Atualiza um endereço específico com base no ID fornecido.
            </summary>
            <param name="id">ID do endereço a ser atualizado.</param>
            <param name="enderecoDto">Objeto contendo os dados atualizados do endereço.</param>
            <returns>IActionResult indicando o resultado da operação.</returns>
            <response code="204">Se a atualização for bem-sucedida.</response>
            <response code="404">Se o endereço não for encontrado.</response>
        </member>
        <member name="M:Teste_Stage.Controllers.EnderecoController.DeleteEndereco(System.Int32)">
            <summary>
            Deleta um endereço específico com base no ID fornecido.
            </summary>
            <param name="id">ID do endereço a ser deletado.</param>
            <returns>IActionResult indicando o resultado da operação.</returns>
            <response code="204">Se a exclusão for bem-sucedida.</response>
            <response code="404">Se o endereço não for encontrado.</response>
        </member>
        <member name="T:Teste_Stage.Controllers.EntrevistaController">
            <summary>
            Controlador para gerenciar operações relacionadas a Entrevistas.
            </summary>
        </member>
        <member name="M:Teste_Stage.Controllers.EntrevistaController.#ctor(Teste_Stage.Services.EntrevistaService)">
            <summary>
            Construtor da classe EntrevistaController.
            </summary>
            <param name="entrevistaService">Instância do serviço de entrevistas.</param>
        </member>
        <member name="M:Teste_Stage.Controllers.EntrevistaController.CadastrarEntrevista(Teste_Stage.Data.Dtos.EntrevistaDtos.CreateEntrevistaDto)">
            <summary>
            Adiciona um entrevista ao banco de dados
            </summary>
            <param name="entrevistaDto">Objeto com os campos necessários para criação de uma entrevista</param>
            <returns>IActionResult</returns>
            <response code="201">Caso inserção seja feita com sucesso</response>
        </member>
        <member name="M:Teste_Stage.Controllers.EntrevistaController.RecuperaEntrevistas(System.Int32,System.Int32)">
            <summary>
            Retorna uma lista de entrevistas. Você pode escolher a quantidade de elementos nessa lista.
            </summary>
            <param name="skip">Número de elementos a pular</param>
            <param name="take">Número de elementos a retornar</param>
            <returns>Uma lista de entrevistas dentro de um contêiner _embedded.</returns>
            <response code="200">Caso a recuperação seja feita com sucesso</response>
        </member>
        <member name="M:Teste_Stage.Controllers.EntrevistaController.AchaEntrevistaPorId(System.Int32)">
            <summary>
            Retorna uma entrevista específica com base no ID fornecido.
            </summary>
            <param name="id">ID da entrevista a ser encontrada</param>
            <returns>IActionResult contendo a entrevista encontrada ou um status de NotFound se a entrevista não existir</returns>
            <response code="200">Retorna a entrevista encontrada</response>
            <response code="404">Se a entrevista não for encontrada</response>
        </member>
        <member name="M:Teste_Stage.Controllers.EntrevistaController.AtualizaEntrevista(System.Int32,Teste_Stage.Data.Dtos.EntrevistaDtos.UpdateEntrevistaDto)">
            <summary>
            Atualiza uma entrevista específica com base no ID fornecido.
            </summary>
            <param name="id">ID da entrevista a ser atualizada</param>
            <param name="entrevistaDto">Objeto contendo os dados atualizados da entrevista</param>
            <returns>IActionResult indicando o resultado da operação</returns>
            <response code="204">Se a atualização for bem-sucedida</response>
            <response code="404">Se a entrevista não for encontrada</response>
        </member>
        <member name="M:Teste_Stage.Controllers.EntrevistaController.DeleteEntrevista(System.Int32)">
            <summary>
            Deleta uma entrevista específica com base no ID fornecido.
            </summary>
            <param name="id">ID da entrevista a ser deletada</param>
            <returns>IActionResult indicando o resultado da operação</returns>
            <response code="204">Se a exclusão for bem-sucedida</response>
            <response code="404">Se a entrevista não for encontrada</response>
        </member>
        <member name="T:Teste_Stage.Services.CandidatoService">
            <summary>
            Serviço responsável por gerenciar as operações relacionadas a candidatos.
            </summary>
        </member>
        <member name="M:Teste_Stage.Services.CandidatoService.#ctor(Teste_Stage.Data.CandidatoContext,AutoMapper.IMapper)">
            <summary>
            Inicializa uma nova instância do serviço de candidatos.
            </summary>
            <param name="context">Contexto do banco de dados.</param>
            <param name="mapper">Mapper para conversão de objetos DTO.</param>
        </member>
        <member name="M:Teste_Stage.Services.CandidatoService.VerificaEnderecoIdDuplicado(Teste_Stage.Data.Dtos.CandidatoDtos.CreateCandidatoDto)">
            <summary>
            Verifica se um endereço ID já está associado a um candidato existente.
            </summary>
            <param name="candidatoDto">Objeto DTO de criação de candidato.</param>
            <returns>Retorna "ok" se o endereço ID não estiver duplicado, caso contrário, retorna null.</returns>
        </member>
        <member name="M:Teste_Stage.Services.CandidatoService.VerificaIdNullo(Teste_Stage.Data.Dtos.CandidatoDtos.CreateCandidatoDto)">
            <summary>
            Verifica se os IDs fornecidos no DTO não são nulos.
            </summary>
            <param name="candidatoDto">Objeto DTO de criação de candidato.</param>
            <returns>Retorna "ok" se os IDs não forem nulos, caso contrário, retorna null.</returns>
        </member>
        <member name="M:Teste_Stage.Services.CandidatoService.CadastrarCandidatoService(Teste_Stage.Data.Dtos.CandidatoDtos.CreateCandidatoDto)">
            <summary>
            Cadastra um novo candidato no banco de dados.
            </summary>
            <param name="candidatoDto">Objeto DTO de criação de candidato.</param>
            <returns>Retorna o objeto candidato criado.</returns>
        </member>
        <member name="M:Teste_Stage.Services.CandidatoService.RecuperaCandidatosService(System.Int32,System.Int32)">
            <summary>
            Recupera uma lista de candidatos com base nos parâmetros de paginação.
            </summary>
            <param name="skip">Número de elementos a pular.</param>
            <param name="take">Número de elementos a retornar.</param>
            <returns>Retorna uma lista de candidatos.</returns>
        </member>
        <member name="M:Teste_Stage.Services.CandidatoService.AchaCandidatoPorIdService(System.Int32)">
            <summary>
            Encontra um candidato específico com base no ID fornecido.
            </summary>
            <param name="id">ID do candidato a ser encontrado.</param>
            <returns>Retorna o objeto DTO do candidato encontrado ou null se não encontrado.</returns>
        </member>
        <member name="M:Teste_Stage.Services.CandidatoService.AtualizaCandidatoService(System.Int32,Teste_Stage.Data.Dtos.CandidatoDtos.UpdateCandidatoDto)">
            <summary>
            Atualiza as informações de um candidato específico com base no ID fornecido.
            </summary>
            <param name="id">ID do candidato a ser atualizado.</param>
            <param name="candidatoDto">Objeto DTO de atualização de candidato.</param>
            <returns>Retorna 0 se a atualização for bem-sucedida, 1 se o endereço ID for inválido, e null se o candidato não for encontrado.</returns>
        </member>
        <member name="M:Teste_Stage.Services.CandidatoService.DeleteCandidatoService(System.Int32)">
            <summary>
            Deleta um candidato específico com base no ID fornecido.
            </summary>
            <param name="id">ID do candidato a ser deletado.</param>
            <returns>Retorna o objeto candidato deletado ou null se não encontrado.</returns>
        </member>
        <member name="T:Teste_Stage.Services.EnderecoService">
            <summary>
            Classe de serviço para gerenciar operações relacionadas a Endereços.
            </summary>
        </member>
        <member name="M:Teste_Stage.Services.EnderecoService.#ctor(Teste_Stage.Data.CandidatoContext,AutoMapper.IMapper)">
            <summary>
            Construtor da classe EnderecoService.
            </summary>
            <param name="context">Contexto do banco de dados CandidatoContext.</param>
            <param name="mapper">Instância do IMapper para mapeamento de objetos.</param>
        </member>
        <member name="M:Teste_Stage.Services.EnderecoService.CadastrarEnderecoService(Teste_Stage.Data.Dtos.EnderecoDtos.CreateEnderecoDto)">
            <summary>
            Cadastra um novo endereço no banco de dados.
            </summary>
            <param name="enderecoDto">Objeto com os campos necessários para criação de um endereço.</param>
            <returns>O objeto Endereco cadastrado.</returns>
        </member>
        <member name="M:Teste_Stage.Services.EnderecoService.RecuperaEnderecosService(System.Int32,System.Int32)">
            <summary>
            Recupera uma lista de endereços com paginação.
            </summary>
            <param name="skip">Número de elementos a pular.</param>
            <param name="take">Número de elementos a retornar.</param>
            <returns>IEnumerable contendo os endereços recuperados.</returns>
        </member>
        <member name="M:Teste_Stage.Services.EnderecoService.AchaEnderecoPorIdService(System.Int32)">
            <summary>
            Recupera um endereço específico com base no ID fornecido.
            </summary>
            <param name="id">ID do endereço a ser encontrado.</param>
            <returns>Objeto ReadEnderecoDto contendo os dados do endereço encontrado ou null se não for encontrado.</returns>
        </member>
        <member name="M:Teste_Stage.Services.EnderecoService.AtualizaEnderecoService(System.Int32,Teste_Stage.Data.Dtos.EnderecoDtos.UpdateEnderecoDto)">
            <summary>
            Atualiza um endereço específico com base no ID fornecido.
            </summary>
            <param name="id">ID do endereço a ser atualizado.</param>
            <param name="enderecoDto">Objeto contendo os dados atualizados do endereço.</param>
            <returns>O objeto Endereco atualizado ou null se não for encontrado.</returns>
        </member>
        <member name="M:Teste_Stage.Services.EnderecoService.DeleteEnderecoService(System.Int32)">
            <summary>
            Deleta um endereço específico com base no ID fornecido.
            </summary>
            <param name="id">ID do endereço a ser deletado.</param>
            <returns>O objeto Endereco deletado ou null se não for encontrado.</returns>
        </member>
        <member name="T:Teste_Stage.Services.EntrevistaService">
            <summary>
            Classe de serviço para gerenciar operações relacionadas a Entrevistas.
            </summary>
        </member>
        <member name="M:Teste_Stage.Services.EntrevistaService.#ctor(Teste_Stage.Data.CandidatoContext,AutoMapper.IMapper)">
            <summary>
            Construtor da classe EntrevistaService.
            </summary>
            <param name="context">Contexto do banco de dados CandidatoContext.</param>
            <param name="mapper">Instância do IMapper para mapeamento de objetos.</param>
        </member>
        <member name="M:Teste_Stage.Services.EntrevistaService.CadastrarEntrevistaService(Teste_Stage.Data.Dtos.EntrevistaDtos.CreateEntrevistaDto)">
            <summary>
            Cadastra uma nova entrevista no banco de dados.
            </summary>
            <param name="entrevistaDto">Objeto com os campos necessários para criação de uma entrevista.</param>
            <returns>O objeto Entrevista cadastrado.</returns>
        </member>
        <member name="M:Teste_Stage.Services.EntrevistaService.RecuperaEntrevistasService(System.Int32,System.Int32)">
            <summary>
            Recupera uma lista de entrevistas com paginação.
            </summary>
            <param name="skip">Número de elementos a pular.</param>
            <param name="take">Número de elementos a retornar.</param>
            <returns>IEnumerable contendo as entrevistas recuperadas.</returns>
        </member>
        <member name="M:Teste_Stage.Services.EntrevistaService.AchaEntrevistaPorIdService(System.Int32)">
            <summary>
            Recupera uma entrevista específica com base no ID fornecido.
            </summary>
            <param name="id">ID da entrevista a ser encontrada.</param>
            <returns>Objeto ReadEntrevistaDto contendo os dados da entrevista encontrada ou null se não for encontrada.</returns>
        </member>
        <member name="M:Teste_Stage.Services.EntrevistaService.AtualizaEntrevistaService(System.Int32,Teste_Stage.Data.Dtos.EntrevistaDtos.UpdateEntrevistaDto)">
            <summary>
            Atualiza uma entrevista específica com base no ID fornecido.
            </summary>
            <param name="id">ID da entrevista a ser atualizada.</param>
            <param name="entrevistaDto">Objeto contendo os dados atualizados da entrevista.</param>
            <returns>O objeto Entrevista atualizado ou null se não for encontrada.</returns>
        </member>
        <member name="M:Teste_Stage.Services.EntrevistaService.DeleteEntrevistaService(System.Int32)">
            <summary>
            Deleta uma entrevista específica com base no ID fornecido.
            </summary>
            <param name="id">ID da entrevista a ser deletada.</param>
            <returns>O objeto Entrevista deletado ou null se não for encontrada.</returns>
        </member>
        <member name="T:Teste_Stage.Services.ServiceResponse.EmbeddedEntrevista">
            <summary>
            Representa uma coleção embutida de entrevistas.
            </summary>
        </member>
        <member name="P:Teste_Stage.Services.ServiceResponse.EmbeddedEntrevista.entrevistas">
            <summary>
            Lista de entrevistas.
            </summary>
        </member>
        <member name="T:Teste_Stage.Services.ServiceResponse.EmbeddedEntrevistaResponse">
            <summary>
            Representa a resposta contendo uma coleção de entrevistas embutidas.
            </summary>
        </member>
        <member name="P:Teste_Stage.Services.ServiceResponse.EmbeddedEntrevistaResponse._embedded">
            <summary>
            Coleção embutida de entrevistas.
            </summary>
        </member>
    </members>
</doc>
